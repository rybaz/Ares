Parameters:
  paramBucketName:
    Type: String
    Description: Bucket Name
  snsSubscription:
    Type: String
    Description: Notification Email
  queueName:
    Type: String
    Description: Desired SQS Queue Name

Resources:

  SNSTopic:
    Type: AWS::SNS::Topic

  SNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: MyTopicPolicy
        Version: "2012-10-17"
        Statement:
          - Sid: Statement-id
            Effect: Allow
            Principal:
              AWS: "*"
            Action: sns:Publish
            Resource: !Ref "SNSTopic"
            Condition:
              ArnLike:
                aws:SourceArn: !Join
                  - ""
                  - - "arn:aws:s3:::"
                    - !Ref "paramBucketName"
      Topics:
        - !Ref "SNSTopic"

  SNSSub:
    Type: "AWS::SNS::Subscription"
    Properties:
      Endpoint: !Ref "snsSubscription"
      Protocol: email
      TopicArn: !Ref "SNSTopic"
  
  S3Bucket:
    Type: AWS::S3::Bucket
    DependsOn:
      - SNSTopicPolicy
    Properties:
      AccessControl: BucketOwnerFullControl
      BucketName: !Ref "paramBucketName"
      NotificationConfiguration:
        TopicConfigurations:
          - Topic: !Ref "SNSTopic"
            Event: s3:ObjectCreated:Put

  SQSQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: !Ref "queueName"
      ReceiveMessageWaitTimeSeconds: 20

  # create IAM Role for EC2/SQS/S3/SNS

Outputs:
  SQSQueue:
    Description: Queue Name
    Value: !GetAtt SQSQueue.QueueName
  SQSQueue1:
    Description: Description
    Value: !Ref SQSQueue